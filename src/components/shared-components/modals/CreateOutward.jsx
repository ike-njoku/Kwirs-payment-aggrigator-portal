"use client";
import React, { useState, useEffect } from "react";
import ModalLayout from "./ModalLayout";
import AuthButtons from "../buttons/AuthButtons";
import { toast } from "react-toastify";

const CreateOutward = ({
  handleCloseModal,
  handleCreateModal,
  isLoading,
}) => {
  const [items, setItems] = useState([]);
  const [vendors, setVendors] = useState([]);
  const [storeBranches, setStoreBranches] = useState([]);
  const [selectedItem, setSelectedItem] = useState(null);
  const [selectedVendor, setSelectedVendor] = useState(null);
  const [selectedStoreBranch, setSelectedStoreBranch] = useState(null);
  const [quantity, setQuantity] = useState("");

  useEffect(() => {
    const fetchData = async () => {
      try {
        // Fetch Items
        const itemsResponse = await fetch(
          `${process.env.NEXT_PUBLIC_BASE_URL}/api/Inventory/ItemDetails/GetAll`
        );
        const itemsData = await itemsResponse.json();
        if (itemsData.StatusCode === 200) {
          setItems(itemsData.Data);
        } else {
          toast.error("Failed to fetch items");
        }

        // Fetch Vendors
        const vendorsResponse = await fetch(
          `${process.env.NEXT_PUBLIC_BASE_URL}/api/Vendors/GetAll`
        );
        const vendorsData = await vendorsResponse.json();
        if (vendorsData.StatusCode === 200) {
          setVendors(vendorsData.Data);
        } else {
          toast.error("Failed to fetch vendors");
        }

        // Fetch Store Branches
        const branchesResponse = await fetch(
          `${process.env.NEXT_PUBLIC_BASE_URL}/api/StoreBranches/GetAll`
        );
        const branchesData = await branchesResponse.json();
        if (branchesData.StatusCode === 200) {
          setStoreBranches(branchesData.Data);
        } else {
          toast.error("Failed to fetch store branches");
        }
      } catch (error) {
        console.error("Error fetching data:", error);
        toast.error("Error loading data");
      }
    };

    fetchData();
  }, []);

  const handleFormSubmit = (e) => {
    e.preventDefault();
    
    if (!selectedItem) {
      toast.error("Please select an item");
      return;
    }
    if (!selectedVendor) {
      toast.error("Please select a vendor");
      return;
    }
    if (!selectedStoreBranch) {
      toast.error("Please select a store branch");
      return;
    }
    if (!quantity || isNaN(quantity) || quantity <= 0) {
      toast.error("Please enter a valid quantity");
      return;
    }
  
    handleCreateModal(
      selectedItem.itemCode,
      0, // rOutwardId will be generated by backend
      selectedStoreBranch.branchId,
      selectedItem.description,
      selectedVendor.vendorId,
      quantity
    );
  };

  return (
    <ModalLayout handleCloseModal={handleCloseModal}>
      <div className="w-full p-5">
        <h3 className="my-5 text-lg font-semibold pb-4 border-b border-b-gray-500 text-gray-700">
          Create Outward
        </h3>
        <form className="w-full" onSubmit={handleFormSubmit}>
          {/* Item Selection Dropdown */}
          <div className="w-full">
            <label className="text-base font-medium text-gray-700">
              Select Item
            </label>
            <div className="border-b-2 border-b-pumpkin h-[45px] w-full rounded-md my-4">
              <select
                className="w-full h-full bg-gray-100 px-3 focus:outline-none text-gray-700 appearance-none"
                value={selectedItem?.itemCode || ""}
                onChange={(e) => {
                  const selected = items.find(item => item.itemCode.toString() === e.target.value);
                  setSelectedItem(selected);
                }}
                required
              >
                <option value="">Select an item</option>
                {items.map((item) => (
                  <option key={item.itemCode} value={item.itemCode}>
                    {item.description} 
                  </option>
                ))}
              </select>
            </div>
          </div>

          {/* Read-only Description (auto-filled from selected item) */}
          <div className="w-full">
            <label className="text-base font-medium text-gray-700">
              Description
            </label>
            <div className="border-b-2 border-b-gray-300 h-[45px] w-full rounded-md my-4 bg-gray-100 flex items-center px-3">
              <span className="text-gray-700">
                {selectedItem?.description || "Select an item first"}
              </span>
            </div>
          </div>

          {/* Vendor Selection Dropdown */}
          <div className="w-full">
            <label className="text-base font-medium text-gray-700">
              Select Vendor
            </label>
            <div className="border-b-2 border-b-pumpkin h-[45px] w-full rounded-md my-4">
              <select
                className="w-full h-full bg-gray-100 px-3 focus:outline-none text-gray-700 appearance-none"
                value={selectedVendor?.vendorId || ""}
                onChange={(e) => {
                  const selected = vendors.find(vendor => vendor.vendorId.toString() === e.target.value);
                  setSelectedVendor(selected);
                }}
                required
              >
                <option value="">Select a vendor</option>
                {vendors.map((vendor) => (
                  <option key={vendor.vendorId} value={vendor.vendorId}>
                    {vendor.vendorName} 
                  </option>
                ))}
              </select>
            </div>
          </div>

          {/* Store Branch Selection Dropdown */}
          <div className="w-full">
            <label className="text-base font-medium text-gray-700">
              Select Store Branch
            </label>
            <div className="border-b-2 border-b-pumpkin h-[45px] w-full rounded-md my-4">
              <select
                className="w-full h-full bg-gray-100 px-3 focus:outline-none text-gray-700 appearance-none"
                value={selectedStoreBranch?.branchId || ""}
                onChange={(e) => {
                  const selected = storeBranches.find(branch => branch.branchId.toString() === e.target.value);
                  setSelectedStoreBranch(selected);
                }}
                required
              >
                <option value="">Select a store branch</option>
                {storeBranches.map((branch) => (
                  <option key={branch.branchId} value={branch.branchId}>
                    {branch.branchName} 
                  </option>
                ))}
              </select>
            </div>
          </div>

          {/* Quantity Field */}
          <div className="w-full">
            <label className="text-base font-medium text-gray-700">
              Quantity
            </label>
            <div className="border-b-2 border-b-pumpkin h-[45px] w-full rounded-md my-4">
              <input
                className="w-full h-full bg-gray-100 px-3 focus:outline-none text-gray-700"
                type="number"
                min="1"
                step="1"
                value={quantity}
                onChange={(e) => setQuantity(e.target.value)}
                placeholder="Enter Quantity"
                required
              />
            </div>
          </div>

          <AuthButtons
            label="Create"
            textColor="text-white"
            isLoading={isLoading}
          />
        </form>
      </div>
    </ModalLayout>
  );
};

export default CreateOutward;