"use client";
import React, { useEffect, useState } from "react";
import DashboardLayout from "../shared-components/layouts/DashboardLayout";
import CustomTable from "../shared-components/table";
import { roleTableData } from "../../utils/table_data";
import { FaPlus } from "react-icons/fa";
import { AxiosGet, AxiosPost } from "../../services/http-service";
import { toast } from "react-toastify";
import CreateVendor from "../shared-components/modals/CreateVendor";
import CreateOutward from "../shared-components/modals/CreateOutward";

const ReturnOutward = () => {
  const tableHeadings = [
    "Outward Id",
    "Vendor Name",
    "Description",
    "Quantity",
    "Store",
    "Return Date",
    "Actions",
    
  ];
  const [tableData, setTableData] = useState(roleTableData);
  const [openDeleteModal, setOpenDeleteModal] = useState(false);
  const [editingVendor, setEditingVendor] = useState(null);
  const [openEditModal, setOpenEditModal] = useState(false);
  const [openCreateModal, setOpenCreateModal] = useState(false);
  const [authenticatedUser, setAuthenticatedUser] = useState({});
  const [isLoading, setIsLoading] = useState(false);

  // Pagination States
  const [currentPage, setCurrentPage] = useState(1);
  const rowsPerPage = 5;
  const totalPages = Math.ceil(tableData.length / rowsPerPage);
  const indexOfLastRow = currentPage * rowsPerPage;
  const indexOfFirstRow = indexOfLastRow - rowsPerPage;
  const currentRows = tableData.slice(indexOfFirstRow, indexOfLastRow);

  // Pagination Handlers
  const nextPage = () => {
    if (currentPage < totalPages) setCurrentPage((prev) => prev + 1);
  };

  const prevPage = () => {
    if (currentPage > 1) setCurrentPage((prev) => prev - 1);
  };

  const handleDelete = () => {
    setOpenDeleteModal(true);
  };

  const handleEditVendor = (vendor) => {
    console.log("Editing vendor:", vendor);
    setEditingVendor(vendor);
    setOpenEditModal(true);
  };

  const handleDeleteItem = async (rOutwardId
  ) => {
    try {
      console.log("Return Outward ID to delete:", rOutwardId
      );
      const deleteResponse = await AxiosGet(
        `${process.env.NEXT_PUBLIC_BASE_URL}/api/Inventory/ReturnOutward/Delete/${rOutwardId
}`
      );
      
      if (deleteResponse?.status === 200 || deleteResponse?.StatusCode === 200) {
        toast.success("OutWard deleted successfully");
        setTableData((prevData) =>
          prevData.filter((item) => item.rOutwardId !== rOutwardId
    )
        );
        setOpenDeleteModal(false);
      } else {
        toast.error(deleteResponse?.StatusMessage || "Could not delete vendor");
      }
    } catch (error) {
      console.error("Delete Error:", error.response?.data || error);
      toast.error("An error occurred while deleting the vendor");
    }
  };

//   edit Return Outward 
const handleEditOutward = async (rOutwardId, itemCode, storeBranchId, description, vendor, qty) => {
    if (!rOutwardId) {
      toast.error("Outward ID is required");
      return;
    }
  
    const updatedOutward = {
      rOutwardId, // Required identifier
      ItemCode: Number(itemCode),
      storeBranchId: Number(storeBranchId),
      description,
      vendor: Number(vendor),
      qty: Number(qty),
      // These fields remain unchanged
      Date: new Date().toISOString(), // You might want to keep original date
      createdBy: "Admin" // Or keep original creator
    };
  
    try {
      const response = await AxiosPost(
        `${process.env.NEXT_PUBLIC_BASE_URL}/api/Inventory/ReturnOutward/Update`,
        updatedOutward
      );
  
      if (response.StatusCode === 200) {
        toast.success("Outward updated successfully");
        GetAllOutwards(); // Refresh the list
        setOpenEditModal(false);
      } else {
        toast.error(response.StatusMessage || "Update failed");
      }
    } catch (error) {
      console.error("Update error:", error);
      toast.error("Failed to update outward");
    }
  };

//   Create Outward
// Create Outward
const handleCreateOutward = async (ItemCode, rOutwardId, storeBranchId, description, vendor, qty) => {
    setIsLoading(true);
  
    const newOutward = {
      ItemCode: Number(ItemCode),
      rOutwardId: Number(rOutwardId), // Typically 0 as it will be generated by backend
      storeBranchId: Number(storeBranchId),
      description: description,
      vendor: Number(vendor),
      qty: Number(qty),
      createdBy: "Admin", // Automatically set
      Date: new Date().toISOString() // Automatically set
    };
  
    try {
      const createResponse = await AxiosPost(
        `${process.env.NEXT_PUBLIC_BASE_URL}/api/Inventory/ReturnOutward/Create`,
        newOutward
      );
  
      if (createResponse.StatusCode !== 200) {
        toast.error(createResponse.StatusMessage || "Could not create Outward");
        setIsLoading(false);
        return;
      }
  
      toast.success("Outward record created successfully");
      GetAllOutwards(); // Refresh the outward list
      setIsLoading(false);
      setOpenCreateModal(false);
    } catch (error) {
      console.error("Create Outward Error:", error);
      toast.error("An error occurred while creating the outward record");
      setIsLoading(false);
    }
  };

// Get all outwards 
const GetAllOutwards = async () => {
    try {
      const apiResponse = await AxiosGet(
        `${process.env.NEXT_PUBLIC_BASE_URL}/api/Inventory/ReturnOutward/GetAll`
      );
  
      if (!apiResponse || !apiResponse.data) {
        toast.error("Could not fetch Outwards");
        return;
      }
  
      console.log("API Response:", apiResponse.data.Data);
  
      const formatDate = (dateString) => {
        if (!dateString) return '';
        const date = new Date(dateString);
        return date.toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'short',
          day: 'numeric',
       
        });
      };
  
      let tableData = apiResponse.data.Data.map((item) => ({
        ...item,
        rOutwardId: item.rOutwardId,
        description: item.description,
        qty: item.qty,
        Store: item.Store,
        VendorName: item.vendorName,
        ReturnDate: formatDate(item.ReturnDate) // Format the date here
      }));
  
      setTableData(tableData);
      setCurrentPage(1); // Reset to first page when data changes
    } catch (error) {
      toast.error("An error occurred while fetching Outwards");
      console.error("Fetch error:", error);
    }
  };
  useEffect(() => {
    const user = JSON.parse(localStorage.getItem("authDetails"));
    setAuthenticatedUser(user);
    GetAllOutwards();
  }, []);

  return (
    <DashboardLayout page="Return Outward">
      <section className="w-full">
        <div className="w-[90%] mx-auto py-5">
          <div className="w-full lg:mt-10">
            <section className="w-full mb-3 flex justify-end items-center gap-5 lg:justify-start">
              <button
                className="text-pumpkin focus:outline-none font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center gap-2 border border-pumpkin"
                type="button"
                onClick={() => setOpenCreateModal(true)}
              >
                Create Return Outward
                <FaPlus />
              </button>
            </section>

            <CustomTable
              tableHeadings={tableHeadings}
              tableData={currentRows}
              isEllipseDropdwon={true}
              tableType="returnoutward"
              handleDelete={handleDelete}
              handleEdit={handleEditVendor}
              openDeleteModal={openDeleteModal}
              setOpenDeleteModal={setOpenDeleteModal}
              setOpenEditModal={setOpenEditModal}
              openEditOutwardModal={openEditModal}
              setOpenEditPaymentModal={setOpenEditModal}
              handleDeleteItem={handleDeleteItem}
              selectedOutward={editingVendor}
              handleEditItem={handleEditOutward}
              label="me"
              heading="Update Outward"
            />

            {/* Pagination Controls */}
            <div className="flex justify-between items-center mt-4 px-4 py-2 bg-gray-100">
              <button
                onClick={prevPage}
                disabled={currentPage === 1}
                className={`px-4 py-2 text-sm font-medium rounded ${
                  currentPage === 1
                    ? "bg-gray-300 cursor-not-allowed"
                    : "bg-pumpkin text-white hover:bg-orange-600"
                }`}
              >
                Previous
              </button>
              <span className="text-sm font-medium">
                Page {currentPage} of {totalPages}
              </span>
              <button
                onClick={nextPage}
                disabled={currentPage >= totalPages}
                className={`px-4 py-2 text-sm font-medium rounded ${
                  currentPage >= totalPages
                    ? "bg-gray-300 cursor-not-allowed"
                    : "bg-pumpkin text-white hover:bg-orange-600"
                }`}
              >
                Next
              </button>
            </div>
          </div>
        </div>

        {openCreateModal && (
          <CreateOutward
            handleCloseModal={() => setOpenCreateModal(false)}
            handleCreateModal={handleCreateOutward}
            isLoading={isLoading}
          />
        )}

        
      </section>
    </DashboardLayout>
  );
};

export default ReturnOutward;